/* NL_Xlator.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. NL_Xlator.java */
/** New line translator. */
public class NL_Xlator implements NL_XlatorConstants {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    NL_Xlator parser = new NL_Xlator(System.in);
    parser.ExpressionList();
  }

/** Top level production. */
  final public void ExpressionList() throws ParseException {String s;
System.out.println("Please type in an expression followed by a \";\" or ^D to quit:");
   System.out.println("");
    label_1:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case ID:
      case NUM:
      case 10:{
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      s = Expression();
      jj_consume_token(7);
System.out.println(s);
   System.out.println("");
   System.out.println("Please type in another expression followed by a \";\" or ^D to quit:");
   System.out.println("");
    }
    jj_consume_token(0);
}

/** An Expression. */
  final public String Expression() throws ParseException {java.util.Vector termimage = new java.util.Vector();
 String s;
    s = Term();
termimage.addElement(s);
    label_2:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 8:{
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(8);
      s = Term();
termimage.addElement(s);
    }
if (termimage.size() == 1) {
     {if ("" != null) return (String)termimage.elementAt(0);}
          } else {
            s = "the sum of " + (String)termimage.elementAt(0);
     for (int i = 1; i < termimage.size()-1; i++) {
       s += ", " + (String)termimage.elementAt(i);
     }
     if (termimage.size() > 2) {
       s += ",";
     }
     s += " and " + (String)termimage.elementAt(termimage.size()-1);
            {if ("" != null) return s;}
          }
    throw new IllegalStateException ("Missing return statement in function");
}

/** A Term. */
  final public String Term() throws ParseException {java.util.Vector factorimage = new java.util.Vector();
 String s;
    s = Factor();
factorimage.addElement(s);
    label_3:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case 9:{
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_3;
      }
      jj_consume_token(9);
      s = Factor();
factorimage.addElement(s);
    }
if (factorimage.size() == 1) {
     {if ("" != null) return (String)factorimage.elementAt(0);}
          } else {
            s = "the product of " + (String)factorimage.elementAt(0);
     for (int i = 1; i < factorimage.size()-1; i++) {
       s += ", " + (String)factorimage.elementAt(i);
     }
     if (factorimage.size() > 2) {
       s += ",";
     }
     s += " and " + (String)factorimage.elementAt(factorimage.size()-1);
            {if ("" != null) return s;}
          }
    throw new IllegalStateException ("Missing return statement in function");
}

/** A Factor. */
  final public String Factor() throws ParseException {Token t;
 String s;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case ID:{
      t = jj_consume_token(ID);
{if ("" != null) return t.image;}
      break;
      }
    case NUM:{
      t = jj_consume_token(NUM);
{if ("" != null) return t.image;}
      break;
      }
    case 10:{
      jj_consume_token(10);
      s = Expression();
      jj_consume_token(11);
{if ("" != null) return s;}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new IllegalStateException ("Missing return statement in function");
}

  /** Generated Token Manager. */
  public NL_XlatorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[4];
  static private int[] jj_la1_0;
  static {
	   jj_la1_init_0();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x460,0x100,0x200,0x460,};
	}

  /**
   * Constructor with InputStream and supplied encoding
   * @param stream input stream
   * @param encoding charset to be used. May not be <code>null</code>.
   */
  public NL_Xlator(final java.io.InputStream stream, final String encoding) {
   try {
     jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
   } catch(final java.io.UnsupportedEncodingException e) {
     throw new IllegalStateException(e);
   }
	 token_source = new NL_XlatorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /**
   * Reinitialise
   * @param stream input stream
   * @param encoding charset to be used. May not be <code>null</code>.
   */
  public void ReInit(final java.io.InputStream stream, final String encoding) {
	  try {
      jj_input_stream.reInit(stream, encoding, 1, 1);
    } catch(final java.io.UnsupportedEncodingException e) { 
      throw new IllegalStateException(e);
    }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /**
   * Constructor with InputStream.
   * @param stream char stream
   */
  public NL_Xlator(final java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new NL_XlatorTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 4; i++)
     jj_la1[i] = -1;
  }

  /**
   * Reinitialise
   * @param stream char stream
   */
  public void ReInit(final java.io.Reader stream) {
	if (jj_input_stream == null) {
	  jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	  jj_input_stream.reInit(stream, 1, 1);
  }
	if (token_source == null) {
 token_source = new NL_XlatorTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 4; i++)
     jj_la1[i] = -1;
  }

  /**
   * Constructor with generated Token Manager.
   * @param tm Token manager to use
   */
  public NL_Xlator(final NL_XlatorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  /**
   * Reinitialise
   * @param tm Token manager to use
   */
  public void ReInit(final NL_XlatorTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 4; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(final int kind) throws ParseException {
    final Token oldToken = token;
    if (token.next != null)
      token = token.next;
    else {
      token.next = token_source.getNextToken();
      token = token.next;
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


  /**
   * @return the next Token.
   */
  public final Token getNextToken() {
   if (token.next != null)
     token = token.next;
   else
     token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

  /**
   * @param index index to be retrieved
   * @return the specific Token.
   */
  public final Token getToken(final int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next == null)
        t.next = token_source.getNextToken();
      t = t.next;
    }
    return t;
  }

  private int jj_ntk_f() {
    final Token nt = jj_nt = token.next;
    final int ret;
    if (nt == null) {
      token.next = token_source.getNextToken();
      ret = jj_ntk = token.next.kind;
    }
    else
      ret = jj_ntk = nt.kind;
    return ret;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /**
   * Generate ParseException.
   * @return new Exception object. Never <code>null</code>
   */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[12];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 4; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 12; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /**
   * @return Always <code>false</code>.
   */
  public final boolean trace_enabled() {
    return false;
  }

  /** Enable tracing. */
  public final void enable_tracing() {}

  /** Disable tracing. */
  public final void disable_tracing() {}

}
